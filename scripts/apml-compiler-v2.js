#!/usr/bin/env node

/**
 * APML-to-Vue Compiler v2.0
 * Proper implementation based on APML v0.9.0 specification
 */

import fs from 'fs'
import path from 'path'

class APMLCompiler {
  constructor() {
    this.routes = []
    this.appName = ''
  }

  parseValidatedAPML(apmlContent) {
    const lines = apmlContent.split('\n')
    
    // Extract app name
    const appMatch = apmlContent.match(/^app (\w+):/m)
    if (appMatch) {
      this.appName = appMatch[1]
    }
    
    // Parse interface sections for routes
    let currentInterface = null
    let currentRouteGroup = null
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      const trimmed = line.trim()
      
      // Track interface sections
      if (trimmed.startsWith('interface ')) {
        currentInterface = trimmed.replace('interface ', '').replace(':', '')
        continue
      }
      
      // Look for route groups
      if (trimmed.endsWith('_routes:')) {
        currentRouteGroup = trimmed.replace('_routes:', '')
        continue
      }
      
      // Parse individual routes
      if (trimmed.endsWith('_route:')) {
        const routeData = this.parseRoute(lines, i)
        if (routeData) {
          this.routes.push(routeData)
        }
      }
    }
  }
  
  parseRoute(lines, startIndex) {
    const route = {}
    let i = startIndex + 1
    
    // Parse route properties until we hit the next route or section
    while (i < lines.length) {
      const line = lines[i]
      const trimmed = line.trim()
      
      // Stop if we hit another route or section
      if (trimmed.endsWith('_route:') || trimmed.endsWith('_routes:') || 
          trimmed.startsWith('interface') || trimmed.startsWith('logic')) {
        break
      }
      
      // Parse key-value pairs
      const match = trimmed.match(/^(\w+):\s*"([^"]*)"$/)
      if (match) {
        const [, key, value] = match
        route[key] = value
      }
      
      i++
    }
    
    return Object.keys(route).length > 0 ? route : null
  }

  generateVueRouter() {
    // Filter for valid routes with required fields
    const validRoutes = this.routes.filter(route => 
      route.path && route.name && route.component
    )
    
    // Add the main patterns index route
    const indexRoute = {
      path: '/patterns',
      name: 'PatternLibrary', 
      component: 'PatternLibraryIndexPage',
      meta_title: 'Design Intelligence Pattern Library | APML',
      meta_description: 'Complete methodologies for human-centered problem solving using APML',
      navigation_label: 'Pattern Library'
    }
    
    const allRoutes = [indexRoute, ...validRoutes]
    
    const routeConfigs = allRoutes.map(route => {
      const componentPath = route.path.startsWith('/learning/') 
        ? '../pages/learning/' 
        : '../pages/patterns/'
        
      const componentName = route.component.endsWith('Page') 
        ? route.component 
        : route.component + 'Page'
        
      return `  {
    path: '${route.path}',
    name: '${route.name}',
    component: () => import('${componentPath}${componentName}.vue'),
    meta: {
      title: '${this.escapeQuotes(route.meta_title || route.name)}',
      description: '${this.escapeQuotes(route.meta_description || '')}',
      navLabel: '${this.escapeQuotes(route.navigation_label || route.name)}'
    }
  }`
    }).join(',\n')

    return `// Pattern Library Routes - Generated from validated APML specification
// Auto-generated by APML Compiler v2.0 - Do not edit manually

const PatternLibraryRoutes = [
${routeConfigs}
]

export default PatternLibraryRoutes
`
  }
  
  escapeQuotes(str) {
    return str.replace(/'/g, "\\'").replace(/"/g, '\\"')
  }
  
  compile(inputFile, outputFile) {
    try {
      console.log('üîÑ APML Compiler v2.0 - Compiling validated APML...')
      
      const apmlContent = fs.readFileSync(inputFile, 'utf8')
      this.parseValidatedAPML(apmlContent)
      
      console.log(`üìã App: ${this.appName}`)
      console.log(`üìã Found ${this.routes.length} valid route definitions`)
      
      const vueCode = this.generateVueRouter()
      fs.writeFileSync(outputFile, vueCode)
      
      console.log(`‚úÖ Generated working Vue routes: ${outputFile}`)
      console.log('üöÄ Validated routes compiled successfully!')
      
    } catch (error) {
      console.error('‚ùå APML compilation failed:', error.message)
      process.exit(1)
    }
  }
}

// Execute compilation
const compiler = new APMLCompiler()
const inputFile = process.argv[2] || 'pattern-library-routing.apml'
const outputFile = process.argv[3] || 'src/router/pattern-library-routes.js'

compiler.compile(inputFile, outputFile)