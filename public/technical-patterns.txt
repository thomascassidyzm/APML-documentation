APML Technical Patterns - Complete Compilation Reference
For LLMs: Transform APML specifications into production-ready applications

===========================================
TABLE OF CONTENTS
===========================================

1. COMPILATION OVERVIEW
2. VUE.JS COMPILATION PATTERNS
3. REACT COMPILATION PATTERNS  
4. SWIFT/IOS COMPILATION PATTERNS
5. KOTLIN/ANDROID COMPILATION PATTERNS
6. DATABASE GENERATION PATTERNS
7. API ENDPOINT GENERATION
8. AUTHENTICATION IMPLEMENTATION
9. DEPLOYMENT CONFIGURATIONS
10. SECURITY IMPLEMENTATIONS
11. PERFORMANCE OPTIMIZATIONS
12. TESTING PATTERN GENERATION
13. ERROR HANDLING IMPLEMENTATION
14. PWA CONFIGURATION
15. MONITORING AND ANALYTICS

===========================================
1. COMPILATION OVERVIEW
===========================================

COMPILATION PROCESS:
1. Parse APML specification
2. Validate Trinity Principle compliance
3. Generate data models and schemas
4. Create user interface components
5. Implement business logic flows
6. Generate API endpoints and routes
7. Configure authentication and security
8. Set up deployment configuration
9. Generate testing suites
10. Optimize for production

COMPILATION TARGETS:
- Vue.js 3 + Composition API + TypeScript
- React 18 + Hooks + TypeScript  
- Swift + SwiftUI (iOS)
- Kotlin + Jetpack Compose (Android)
- PostgreSQL/MySQL (Database)
- Node.js/Express (Backend APIs)

===========================================
2. VUE.JS COMPILATION PATTERNS
===========================================

FOLDER STRUCTURE:
```
project-name/
├── src/
│   ├── components/           # Reusable UI components
│   ├── views/               # Page-level components (interfaces)
│   ├── stores/              # Pinia stores (data management)
│   ├── services/            # API service layers
│   ├── types/               # TypeScript type definitions
│   ├── router/              # Vue Router configuration
│   ├── composables/         # Vue composables (logic)
│   └── main.ts
├── public/
├── package.json
├── vite.config.ts
├── tsconfig.json
└── tailwind.config.js
```

DATA MODEL → PINIA STORE:
```typescript
// APML: data User: id: unique_id, name: text required
// GENERATES:
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

export const useUserStore = defineStore('user', () => {
  const users = ref<User[]>([])
  const currentUser = ref<User | null>(null)
  
  const isAuthenticated = computed(() => currentUser.value !== null)
  
  const createUser = async (userData: Omit<User, 'id'>) => {
    const user: User = {
      id: crypto.randomUUID(),
      ...userData
    }
    users.value.push(user)
    return user
  }
  
  const updateUser = async (id: string, updates: Partial<User>) => {
    const index = users.value.findIndex(u => u.id === id)
    if (index !== -1) {
      users.value[index] = { ...users.value[index], ...updates }
    }
  }
  
  const deleteUser = async (id: string) => {
    users.value = users.value.filter(u => u.id !== id)
  }
  
  return {
    users: readonly(users),
    currentUser: readonly(currentUser),
    isAuthenticated,
    createUser,
    updateUser,
    deleteUser
  }
})
```

INTERFACE → VUE COMPONENT:
```vue
<!-- APML: interface authentication: show login_options -->
<!-- GENERATES: -->
<template>
  <div class="authentication-container">
    <div class="login-options">
      <h2>{{ title }}</h2>
      
      <button 
        @click="handleGoogleLogin"
        class="google-login-btn"
        :disabled="isLoading"
      >
        {{ googleLoginText }}
      </button>
      
      <button 
        @click="handleFacebookLogin" 
        class="facebook-login-btn"
        :disabled="isLoading"
      >
        {{ facebookLoginText }}
      </button>
      
      <router-link 
        to="/signup" 
        class="email-signup-link"
      >
        {{ emailSignupText }}
      </router-link>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useAuthStore } from '@/stores/auth'
import { useRouter } from 'vue-router'

const authStore = useAuthStore()
const router = useRouter()
const isLoading = ref(false)

// APML interface properties become reactive data
const title = "Join the Community"
const googleLoginText = "Continue with Google"
const facebookLoginText = "Continue with Facebook"
const emailSignupText = "Sign up with Email"

const handleGoogleLogin = async () => {
  isLoading.value = true
  try {
    await authStore.authenticateWithGoogle()
    if (authStore.currentUser?.onboardingCompleted) {
      router.push('/city-discovery')
    } else {
      router.push('/user-onboarding')
    }
  } catch (error) {
    console.error('Google login failed:', error)
  } finally {
    isLoading.value = false
  }
}

const handleFacebookLogin = async () => {
  isLoading.value = true
  try {
    await authStore.authenticateWithFacebook()
    if (authStore.currentUser?.onboardingCompleted) {
      router.push('/city-discovery')
    } else {
      router.push('/user-onboarding')
    }
  } catch (error) {
    console.error('Facebook login failed:', error)
  } finally {
    isLoading.value = false
  }
}
</script>
```

LOGIC → COMPOSABLE:
```typescript
// APML: logic authentication_processing: process google_login
// GENERATES:
import { ref } from 'vue'
import { useRouter } from 'vue-router'

export const useAuthenticationProcessing = () => {
  const router = useRouter()
  const isProcessing = ref(false)
  const error = ref<string | null>(null)
  
  const processGoogleLogin = async () => {
    isProcessing.value = true
    error.value = null
    
    try {
      // Authenticate with Google OAuth
      const googleAuth = await authenticateWithGoogle()
      
      // Check if user exists
      const existingUser = await findUserByEmail(googleAuth.email)
      
      if (existingUser) {
        // Create user session
        await createUserSession(existingUser)
        
        if (existingUser.onboardingCompleted) {
          router.push('/city-discovery')
        } else {
          router.push('/user-onboarding')
        }
      } else {
        // Create new user record with Google data
        const newUser = await createUser({
          name: googleAuth.name,
          email: googleAuth.email,
          profilePhoto: googleAuth.picture,
          authProvider: 'google',
          onboardingCompleted: false
        })
        
        await createUserSession(newUser)
        router.push('/user-onboarding')
      }
    } catch (err) {
      error.value = 'Google authentication failed. Please try again.'
      console.error('Google login error:', err)
    } finally {
      isProcessing.value = false
    }
  }
  
  return {
    isProcessing: readonly(isProcessing),
    error: readonly(error),
    processGoogleLogin
  }
}
```

PACKAGE.JSON:
```json
{
  "name": "apml-app",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc && vite build",
    "preview": "vite preview",
    "type-check": "vue-tsc --noEmit",
    "lint": "eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix",
    "test": "vitest"
  },
  "dependencies": {
    "vue": "^3.4.0",
    "vue-router": "^4.2.0",
    "pinia": "^2.1.0",
    "@vueuse/core": "^10.0.0",
    "axios": "^1.6.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.0",
    "@vue/tsconfig": "^0.5.0",
    "typescript": "~5.3.0",
    "vue-tsc": "^1.8.0",
    "vite": "^5.0.0",
    "vitest": "^1.0.0",
    "tailwindcss": "^3.4.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0"
  }
}
```

===========================================
3. REACT COMPILATION PATTERNS
===========================================

FOLDER STRUCTURE:
```
project-name/
├── src/
│   ├── components/          # Reusable UI components
│   ├── pages/              # Page components (interfaces)
│   ├── hooks/              # Custom React hooks (logic)
│   ├── store/              # Redux Toolkit slices
│   ├── services/           # API service layers
│   ├── types/              # TypeScript definitions
│   ├── utils/              # Utility functions
│   └── App.tsx
├── public/
├── package.json
├── tsconfig.json
└── tailwind.config.js
```

DATA MODEL → REDUX SLICE:
```typescript
// APML: data User: id: unique_id, name: text required
// GENERATES:
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'

interface User {
  id: string
  name: string
  email: string
  profilePhoto?: string
  authProvider: 'google' | 'facebook' | 'email'
  joinDate: string
  totalReviews: number
  onboardingCompleted: boolean
}

interface UserState {
  users: User[]
  currentUser: User | null
  loading: boolean
  error: string | null
}

const initialState: UserState = {
  users: [],
  currentUser: null,
  loading: false,
  error: null
}

export const createUser = createAsyncThunk(
  'user/create',
  async (userData: Omit<User, 'id' | 'joinDate' | 'totalReviews'>) => {
    const user: User = {
      id: crypto.randomUUID(),
      joinDate: new Date().toISOString(),
      totalReviews: 0,
      ...userData
    }
    // API call would go here
    return user
  }
)

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    updateUser: (state, action: PayloadAction<{id: string, updates: Partial<User>}>) => {
      const { id, updates } = action.payload
      const index = state.users.findIndex(u => u.id === id)
      if (index !== -1) {
        state.users[index] = { ...state.users[index], ...updates }
      }
    },
    setCurrentUser: (state, action: PayloadAction<User | null>) => {
      state.currentUser = action.payload
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(createUser.pending, (state) => {
        state.loading = true
        state.error = null
      })
      .addCase(createUser.fulfilled, (state, action) => {
        state.loading = false
        state.users.push(action.payload)
      })
      .addCase(createUser.rejected, (state, action) => {
        state.loading = false
        state.error = action.error.message || 'Failed to create user'
      })
  }
})

export const { updateUser, setCurrentUser } = userSlice.actions
export default userSlice.reducer
```

INTERFACE → REACT COMPONENT:
```tsx
// APML: interface authentication: show login_options
// GENERATES:
import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAppDispatch, useAppSelector } from '../hooks/redux'
import { useAuthenticationProcessing } from '../hooks/useAuthenticationProcessing'

const AuthenticationPage: React.FC = () => {
  const navigate = useNavigate()
  const dispatch = useAppDispatch()
  const { processGoogleLogin, processFacebookLogin } = useAuthenticationProcessing()
  const [isLoading, setIsLoading] = useState(false)

  // APML interface properties
  const title = "Join the Community"
  const googleLoginText = "Continue with Google"
  const facebookLoginText = "Continue with Facebook" 
  const emailSignupText = "Sign up with Email"

  const handleGoogleLogin = async () => {
    setIsLoading(true)
    try {
      const user = await processGoogleLogin()
      if (user.onboardingCompleted) {
        navigate('/city-discovery')
      } else {
        navigate('/user-onboarding')
      }
    } catch (error) {
      console.error('Google login failed:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const handleFacebookLogin = async () => {
    setIsLoading(true)
    try {
      const user = await processFacebookLogin()
      if (user.onboardingCompleted) {
        navigate('/city-discovery')
      } else {
        navigate('/user-onboarding')
      }
    } catch (error) {
      console.error('Facebook login failed:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="authentication-container">
      <div className="login-options">
        <h2>{title}</h2>
        
        <button 
          onClick={handleGoogleLogin}
          className="google-login-btn"
          disabled={isLoading}
        >
          {googleLoginText}
        </button>
        
        <button 
          onClick={handleFacebookLogin}
          className="facebook-login-btn" 
          disabled={isLoading}
        >
          {facebookLoginText}
        </button>
        
        <button 
          onClick={() => navigate('/signup')}
          className="email-signup-link"
        >
          {emailSignupText}
        </button>
      </div>
    </div>
  )
}

export default AuthenticationPage
```

===========================================
4. SWIFT/IOS COMPILATION PATTERNS
===========================================

PROJECT STRUCTURE:
```
ProjectName/
├── Models/              # Data models
├── Views/               # SwiftUI views (interfaces)
├── ViewModels/          # Business logic (MVVM)
├── Services/            # API and data services
├── Utils/               # Utility functions
├── Resources/           # Assets, strings
└── App.swift
```

DATA MODEL → SWIFT STRUCT:
```swift
// APML: data User: id: unique_id, name: text required
// GENERATES:
import Foundation
import SwiftUI

struct User: Identifiable, Codable {
    let id: UUID
    var name: String
    var email: String
    var profilePhoto: URL?
    var authProvider: AuthProvider
    var joinDate: Date
    var totalReviews: Int
    var onboardingCompleted: Bool
    
    enum AuthProvider: String, CaseIterable, Codable {
        case google, facebook, email
    }
    
    init(name: String, email: String, authProvider: AuthProvider) {
        self.id = UUID()
        self.name = name
        self.email = email
        self.authProvider = authProvider
        self.joinDate = Date()
        self.totalReviews = 0
        self.onboardingCompleted = false
    }
}

// MARK: - User Store (ObservableObject)
@MainActor
class UserStore: ObservableObject {
    @Published var users: [User] = []
    @Published var currentUser: User?
    @Published var isLoading = false
    @Published var error: String?
    
    var isAuthenticated: Bool {
        currentUser != nil
    }
    
    func createUser(_ user: User) async {
        isLoading = true
        defer { isLoading = false }
        
        do {
            // API call would go here
            users.append(user)
        } catch {
            self.error = error.localizedDescription
        }
    }
    
    func updateUser(_ user: User) async {
        if let index = users.firstIndex(where: { $0.id == user.id }) {
            users[index] = user
        }
        if currentUser?.id == user.id {
            currentUser = user
        }
    }
}
```

INTERFACE → SWIFTUI VIEW:
```swift
// APML: interface authentication: show login_options
// GENERATES:
import SwiftUI

struct AuthenticationView: View {
    @StateObject private var authStore = AuthStore()
    @State private var isLoading = false
    
    // APML interface properties
    private let title = "Join the Community"
    private let googleLoginText = "Continue with Google"
    private let facebookLoginText = "Continue with Facebook"
    private let emailSignupText = "Sign up with Email"
    
    var body: some View {
        VStack(spacing: 20) {
            Text(title)
                .font(.largeTitle)
                .fontWeight(.bold)
            
            Button(action: handleGoogleLogin) {
                HStack {
                    Image(systemName: "globe")
                    Text(googleLoginText)
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            .disabled(isLoading)
            
            Button(action: handleFacebookLogin) {
                HStack {
                    Image(systemName: "person.circle")
                    Text(facebookLoginText)
                }
                .frame(maxWidth: .infinity)
                .padding()
                .background(Color.indigo)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            .disabled(isLoading)
            
            NavigationLink(destination: EmailSignupView()) {
                Text(emailSignupText)
                    .foregroundColor(.blue)
            }
        }
        .padding()
    }
    
    private func handleGoogleLogin() {
        isLoading = true
        Task {
            await authStore.processGoogleLogin()
            isLoading = false
            
            if let user = authStore.currentUser {
                // Navigate based on onboarding status
                if user.onboardingCompleted {
                    // Navigate to city discovery
                } else {
                    // Navigate to user onboarding  
                }
            }
        }
    }
    
    private func handleFacebookLogin() {
        isLoading = true
        Task {
            await authStore.processFacebookLogin()
            isLoading = false
        }
    }
}
```

===========================================
5. KOTLIN/ANDROID COMPILATION PATTERNS
===========================================

PROJECT STRUCTURE:
```
app/src/main/java/com/yourapp/
├── data/
│   ├── models/          # Data models
│   ├── repository/      # Data repositories
│   └── local/          # Room database
├── ui/
│   ├── screens/        # Compose screens (interfaces)
│   ├── components/     # Reusable components
│   └── theme/          # App theming
├── domain/
│   ├── usecases/       # Business logic
│   └── repository/     # Repository interfaces
└── MainActivity.kt
```

DATA MODEL → KOTLIN DATA CLASS:
```kotlin
// APML: data User: id: unique_id, name: text required
// GENERATES:
import androidx.room.Entity
import androidx.room.PrimaryKey
import java.util.Date
import java.util.UUID

@Entity(tableName = "users")
data class User(
    @PrimaryKey val id: String = UUID.randomUUID().toString(),
    val name: String,
    val email: String,
    val profilePhoto: String? = null,
    val authProvider: AuthProvider,
    val joinDate: Date = Date(),
    val totalReviews: Int = 0,
    val onboardingCompleted: Boolean = false
)

enum class AuthProvider {
    GOOGLE, FACEBOOK, EMAIL
}

// Repository
interface UserRepository {
    suspend fun createUser(user: User): Result<User>
    suspend fun updateUser(user: User): Result<User>
    suspend fun getUserById(id: String): Result<User?>
    suspend fun getCurrentUser(): Result<User?>
}

// ViewModel
class UserViewModel(
    private val userRepository: UserRepository
) : ViewModel() {
    
    private val _users = MutableStateFlow<List<User>>(emptyList())
    val users: StateFlow<List<User>> = _users.asStateFlow()
    
    private val _currentUser = MutableStateFlow<User?>(null)
    val currentUser: StateFlow<User?> = _currentUser.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    val isAuthenticated: Boolean
        get() = _currentUser.value != null
    
    fun createUser(userData: CreateUserRequest) {
        viewModelScope.launch {
            _isLoading.value = true
            val result = userRepository.createUser(
                User(
                    name = userData.name,
                    email = userData.email,
                    authProvider = userData.authProvider
                )
            )
            _isLoading.value = false
            
            result.onSuccess { user ->
                _users.value = _users.value + user
            }
        }
    }
}
```

INTERFACE → COMPOSE SCREEN:
```kotlin
// APML: interface authentication: show login_options
// GENERATES:
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel

@Composable
fun AuthenticationScreen(
    onNavigateToOnboarding: () -> Unit,
    onNavigateToCityDiscovery: () -> Unit,
    viewModel: AuthViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsState()
    
    // APML interface properties
    val title = "Join the Community"
    val googleLoginText = "Continue with Google"
    val facebookLoginText = "Continue with Facebook"
    val emailSignupText = "Sign up with Email"
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.headlineLarge
        )
        
        Spacer(modifier = Modifier.height(32.dp))
        
        Button(
            onClick = { 
                viewModel.processGoogleLogin { user ->
                    if (user.onboardingCompleted) {
                        onNavigateToCityDiscovery()
                    } else {
                        onNavigateToOnboarding()
                    }
                }
            },
            modifier = Modifier.fillMaxWidth(),
            enabled = !uiState.isLoading
        ) {
            if (uiState.isLoading) {
                CircularProgressIndicator(modifier = Modifier.size(16.dp))
            } else {
                Text(googleLoginText)
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Button(
            onClick = { viewModel.processFacebookLogin() },
            modifier = Modifier.fillMaxWidth(),
            enabled = !uiState.isLoading
        ) {
            Text(facebookLoginText)
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        TextButton(
            onClick = { /* Navigate to email signup */ }
        ) {
            Text(emailSignupText)
        }
        
        uiState.error?.let { error ->
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = error,
                color = MaterialTheme.colorScheme.error
            )
        }
    }
}
```

===========================================
6. DATABASE GENERATION PATTERNS
===========================================

POSTGRESQL SCHEMA:
```sql
-- APML data models automatically generate database schemas
-- data User: id: unique_id, name: text required, email: email required unique

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    profile_photo TEXT,
    auth_provider VARCHAR(50) NOT NULL CHECK (auth_provider IN ('google', 'facebook', 'email')),
    join_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    total_reviews INTEGER DEFAULT 0,
    onboarding_completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- data City: id: unique_id, name: text required, added_by: User required
CREATE TABLE cities (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    state_province VARCHAR(255),
    added_by UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    wikipedia_summary TEXT,
    wikipedia_url TEXT,
    google_images JSONB DEFAULT '[]'::jsonb,
    average_rating DECIMAL(2,1) DEFAULT 0,
    total_reviews INTEGER DEFAULT 0,
    created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- data Review: rating: 1 | 2 | 3 | 4 | 5 required
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    city_id UUID NOT NULL REFERENCES cities(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
    title VARCHAR(255) NOT NULL,
    review_text TEXT NOT NULL,
    lived_there BOOLEAN DEFAULT FALSE,
    visited_duration VARCHAR(50) CHECK (visited_duration IN ('days', 'weeks', 'months', 'years')),
    review_photos JSONB DEFAULT '[]'::jsonb,
    review_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    helpful_votes INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(city_id, user_id) -- One review per user per city
);

-- Indexes for performance
CREATE INDEX idx_cities_name ON cities(name);
CREATE INDEX idx_cities_country ON cities(country);
CREATE INDEX idx_reviews_city_id ON reviews(city_id);
CREATE INDEX idx_reviews_user_id ON reviews(user_id);
CREATE INDEX idx_reviews_rating ON reviews(rating);
CREATE INDEX idx_reviews_date ON reviews(review_date DESC);
```

API ENDPOINTS GENERATION:
```typescript
// APML logic flows automatically generate REST endpoints
import express from 'express'
import { z } from 'zod'

const router = express.Router()

// POST /api/users (create user)
const createUserSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
  authProvider: z.enum(['google', 'facebook', 'email'])
})

router.post('/users', async (req, res) => {
  try {
    const userData = createUserSchema.parse(req.body)
    const user = await userService.createUser(userData)
    res.status(201).json(user)
  } catch (error) {
    res.status(400).json({ error: error.message })
  }
})

// GET /api/cities (with search and filtering)
router.get('/cities', async (req, res) => {
  const { search, country, orderBy = 'average_rating', limit = 10 } = req.query
  
  try {
    const cities = await cityService.getCities({
      search: search as string,
      country: country as string,
      orderBy: orderBy as string,
      limit: parseInt(limit as string)
    })
    res.json(cities)
  } catch (error) {
    res.status(500).json({ error: error.message })
  }
})

// POST /api/reviews (submit review)
router.post('/reviews', requireAuth, async (req, res) => {
  const reviewSchema = z.object({
    cityId: z.string().uuid(),
    rating: z.number().int().min(1).max(5),
    title: z.string().min(1),
    reviewText: z.string().min(10),
    livedThere: z.boolean().default(false),
    visitedDuration: z.enum(['days', 'weeks', 'months', 'years']).optional()
  })
  
  try {
    const reviewData = reviewSchema.parse(req.body)
    const review = await reviewService.createReview({
      ...reviewData,
      userId: req.user.id
    })
    res.status(201).json(review)
  } catch (error) {
    res.status(400).json({ error: error.message })
  }
})
```

===========================================
7. AUTHENTICATION IMPLEMENTATION
===========================================

JWT + OAUTH SETUP:
```typescript
// Environment variables
const config = {
  JWT_SECRET: process.env.JWT_SECRET!,
  GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID!,
  GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET!,
  FACEBOOK_APP_ID: process.env.FACEBOOK_APP_ID!,
  FACEBOOK_APP_SECRET: process.env.FACEBOOK_APP_SECRET!
}

// Authentication middleware
export const requireAuth = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '')
    if (!token) {
      return res.status(401).json({ error: 'Authentication required' })
    }
    
    const decoded = jwt.verify(token, config.JWT_SECRET) as any
    const user = await userService.getUserById(decoded.userId)
    
    if (!user) {
      return res.status(401).json({ error: 'Invalid token' })
    }
    
    req.user = user
    next()
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' })
  }
}

// Google OAuth implementation
export const authenticateWithGoogle = async (googleToken: string) => {
  const response = await fetch(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${googleToken}`)
  const googleUser = await response.json()
  
  let user = await userService.findByEmail(googleUser.email)
  
  if (!user) {
    user = await userService.createUser({
      name: googleUser.name,
      email: googleUser.email,
      profilePhoto: googleUser.picture,
      authProvider: 'google'
    })
  }
  
  const token = jwt.sign({ userId: user.id }, config.JWT_SECRET, { expiresIn: '30d' })
  return { user, token }
}
```

===========================================
8. DEPLOYMENT CONFIGURATIONS
===========================================

VERCEL DEPLOYMENT:
```json
// vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "dist"
      }
    }
  ],
  "routes": [
    { "handle": "filesystem" },
    { "src": "/(.*)", "dest": "/index.html" }
  ],
  "env": {
    "VITE_API_URL": "@api_url",
    "VITE_GOOGLE_CLIENT_ID": "@google_client_id"
  }
}
```

RAILWAY DEPLOYMENT:
```dockerfile
# Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]
```

DOCKER-COMPOSE FOR DEVELOPMENT:
```yaml
# docker-compose.yml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@db:5432/apml_app
    depends_on:
      - db
      - redis
  
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: apml_app
      POSTGRES_USER: user  
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  postgres_data:
```

===========================================
9. SECURITY IMPLEMENTATIONS
===========================================

INPUT VALIDATION:
```typescript
// Zod schemas for all APML data types
export const userSchema = z.object({
  name: z.string().min(1).max(100).trim(),
  email: z.string().email().toLowerCase(),
  profilePhoto: z.string().url().optional(),
  authProvider: z.enum(['google', 'facebook', 'email'])
})

// SQL injection prevention (using Prisma)
const user = await prisma.user.findFirst({
  where: {
    email: {
      equals: email.toLowerCase(),
      mode: 'insensitive'
    }
  }
})

// Rate limiting
import rateLimit from 'express-rate-limit'

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP'
})

app.use(limiter)
```

CSRF PROTECTION:
```typescript
import csrf from 'csurf'

const csrfProtection = csrf({
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict'
  }
})

app.use(csrfProtection)
```

===========================================
10. PERFORMANCE OPTIMIZATIONS
===========================================

CODE SPLITTING (Vue):
```typescript
// router/index.ts - Lazy load interface components
const routes = [
  {
    path: '/authentication',
    component: () => import('../views/AuthenticationView.vue')
  },
  {
    path: '/city-discovery', 
    component: () => import('../views/CityDiscoveryView.vue')
  }
]
```

DATABASE OPTIMIZATION:
```sql
-- Automatic database optimizations for APML queries

-- Index for: for each city order by average_rating desc limit 6
CREATE INDEX idx_cities_rating_desc ON cities(average_rating DESC);

-- Index for: for each review where city_id is selected city sorted by helpful_votes desc
CREATE INDEX idx_reviews_city_helpful ON reviews(city_id, helpful_votes DESC);

-- Partial index for active users
CREATE INDEX idx_users_active ON users(id) WHERE onboarding_completed = true;
```

CACHING STRATEGY:
```typescript
// Redis caching for frequently accessed data
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export const getCachedCities = async () => {
  const cached = await redis.get('featured_cities')
  if (cached) {
    return JSON.parse(cached)
  }
  
  const cities = await cityService.getFeaturedCities()
  await redis.setex('featured_cities', 300, JSON.stringify(cities)) // 5 minute cache
  
  return cities
}
```

===========================================
APML TECHNICAL PATTERNS v0.9.0
Complete compilation reference for production-ready applications

For language specification: language-spec.txt
For business examples: business-patterns.txt
===========================================