APML Business Patterns Reference
For LLMs: Convert any business conversation into perfect APML specifications

PURPOSE
This reference enables any LLM to turn business requirements, user stories, and feature requests into valid, complete APML specifications that can be compiled into working applications.

BUSINESS ‚Üí APML TRANSLATION PATTERNS

1. INTENT DISCOVERY FRAMEWORK

When user describes a business need:
a) Identify the core business entity (User, Product, Order, etc.)
b) Extract key data fields and relationships
c) Determine interface requirements (what users see/do)
d) Map business logic and workflows
e) Apply Trinity Principle validation

2. COMMON BUSINESS PATTERNS

PATTERN: E-commerce Store
Business Need: "I need an online store to sell products"
APML Translation:
```
app OnlineStore:
  title: My Store
  
data Product:
  name: text required
  price: money required
  inventory: number default 0
  
data Order:
  customer_email: email required
  products: list of Product
  total: money calculated
  status: pending | processing | shipped | delivered
  
interface:
  show product_catalog:
    title: "Our Products"
    for each product:
      display product.name, product.price
      when product.inventory > 0:
        button "Add to Cart"
        
  show shopping_cart:
    for each item in cart:
      display item.name, item.price
    button "Checkout"
```

PATTERN: Restaurant Management
Business Need: "I need to manage my restaurant orders and menu"
APML Translation:
```
app RestaurantManager:
  title: Restaurant Orders
  
data MenuItem:
  name: text required
  price: money required
  category: appetizer | main | dessert | drink
  available: boolean default true
  
data Order:
  table_number: number required
  items: list of MenuItem
  status: pending | preparing | ready | served
  total: money calculated
  timestamp: datetime auto
  
interface:
  show menu_management:
    for each category:
      show items where category = this.category
      button "Add New Item"
      
  show order_tracking:
    for each order where status != served:
      display order.table_number, order.items, order.status
      buttons "Mark Ready", "Mark Served"
```

PATTERN: Professional Services
Business Need: "I need to track clients and appointments"
APML Translation:
```
app ClientTracker:
  title: Client Management
  
data Client:
  name: text required
  email: email required
  phone: phone
  status: active | inactive
  
data Appointment:
  client: Client required
  date: datetime required
  service_type: consultation | meeting | review
  notes: text
  status: scheduled | completed | cancelled
  
interface:
  show client_dashboard:
    for each client where status = active:
      display client.name, client.email
      link "Schedule Appointment"
      
  show calendar_view:
    for each appointment this week:
      display appointment.date, appointment.client.name
      when appointment.status = scheduled:
        buttons "Complete", "Cancel"
```

3. INTENT CLARIFICATION TECHNIQUES

When business requirements are unclear, ask:

DATA CLARIFICATION:
- "What information do you need to track?"
- "What fields are required vs optional?"
- "How are these items related?"

INTERFACE CLARIFICATION:
- "What should users see first?"
- "What actions can users take?"
- "What happens when they click/submit?"

LOGIC CLARIFICATION:
- "When does X happen?"
- "What are the different states/statuses?"
- "What business rules apply?"

4. VALIDATION CHECKLIST

Before finalizing APML spec, verify:
‚òê All core business entities are defined as data models
‚òê Required fields are marked as required
‚òê User interface covers all user actions
‚òê Business logic rules are implemented
‚òê Trinity Principle is satisfied:
  - App ‚Üí User: All displays and outputs defined
  - User ‚Üí App: All inputs and interactions covered
  - App ‚Üí App: All business logic workflows included

5. INDUSTRY-SPECIFIC TEMPLATES

HEALTHCARE:
- Patient, Appointment, Treatment data models
- HIPAA compliance considerations
- Medical workflow interfaces

EDUCATION:
- Student, Course, Assignment data models
- Grading and progress tracking
- Communication interfaces

RETAIL:
- Inventory, Customer, Sale data models
- Payment processing workflows
- Order fulfillment interfaces

PROFESSIONAL SERVICES:
- Client, Project, Invoice data models
- Time tracking workflows
- Billing and reporting interfaces

REAL ESTATE:
- Property, Client, Showing data models
- Lead management workflows
- Communication tracking interfaces

6. COMMON BUSINESS LOGIC PATTERNS

STATUS WORKFLOWS:
```
when order.status is pending:
  send confirmation_email
  update inventory
when order.status is shipped:
  send tracking_email
```

CONDITIONAL ACCESS:
```
when user.subscription is premium:
  grant access_to_advanced_features
when user.trial_expired:
  redirect to subscription_page
```

AUTOMATED CALCULATIONS:
```
data Invoice:
  subtotal: money calculated from line_items
  tax: money calculated as subtotal * tax_rate
  total: money calculated as subtotal + tax
```

NOTIFICATIONS:
```
when appointment.date is tomorrow:
  send reminder_email to client
when inventory.level < 10:
  notify admin "Low stock alert"
```

7. QUALITY ASSURANCE

Ensure APML specs include:
- Clear data validation rules
- Proper error handling
- User-friendly interface labels
- Logical workflow completion
- Security considerations (authentication, permissions)

This reference enables any LLM to transform business conversations into production-ready APML specifications that accurately capture business requirements and user needs.

8. COMPLETE EXAMPLE: CITYREP APPLICATION

The following is a comprehensive APML application demonstrating all major language features:

```apml
app CityRep:
  title: "CityRep"
  description: "Share your experiences living in and visiting cities worldwide"
  version: "1.0.0"
  apml_specification_version: "0.9.0"

data User:
  id: unique_id
  name: text required
  email: email required unique
  profile_photo: image_url optional
  auth_provider: google | facebook | email required
  join_date: timestamp auto
  total_reviews: number default 0
  review_sort_preference: most_relevant | newest | oldest | highest_rated | lowest_rated | most_helpful default most_relevant
  onboarding_completed: boolean default false

data City:
  id: unique_id
  name: text required
  country: text required
  state_province: text optional
  added_by: User required
  wikipedia_summary: text optional
  wikipedia_url: text optional
  google_images: list of image_url optional
  user_photos: list of CityPhoto optional
  average_rating: number default 0
  total_reviews: number default 0
  created_date: timestamp auto

data CityPhoto:
  id: unique_id
  city_id: City required
  uploaded_by: User required
  image_url: image_url required
  caption: text optional
  upload_date: timestamp auto

data Review:
  id: unique_id
  city_id: City required
  user_id: User required
  rating: 1 | 2 | 3 | 4 | 5 required
  title: text required
  review_text: text required
  lived_there: boolean default false
  visited_duration: days | weeks | months | years optional
  review_photos: list of image_url optional
  review_date: timestamp auto
  helpful_votes: number default 0

interface authentication:
  show login_options:
    title: "Join the Community"
    google_login_button: "Continue with Google"
    facebook_login_button: "Continue with Facebook"
    email_signup_link: "Sign up with Email"
    
  show email_registration:
    title: "Create Your Account"
    full_name: text required
    email_address: email required
    password: password required
    confirm_password: password required
    create_account_button: "Create Account"
    back_to_options: "‚Üê Back to Login Options"
    
  show email_login:
    title: "Welcome Back"
    email_address: email required
    password: password required
    login_button: "Sign In"
    forgot_password_link: "Forgot Password?"
    back_to_options: "‚Üê Back to Login Options"

interface user_onboarding:
  show welcome_flow:
    title: "Welcome to CityRep!"
    subtitle: "Let's get you started"
    
    step_1_question: "Are you currently visiting somewhere, or do you want to review your hometown/city where you live?"
    visiting_option:
      button: "I'm Visiting üß≥"
      description: "Share your travel experience"
    native_option:
      button: "I Live Here üè†"
      description: "Review your hometown"
      
  show city_selection:
    when user selects visiting:
      title: "Where Are You Visiting?"
      search_existing: "Search for your city"
      city_search: text placeholder "Enter city name..."
      not_found_message: "Don't see your city? Add it below!"
      
    when user selects native:
      title: "What's Your Hometown?"
      search_existing: "Search for your city"
      city_search: text placeholder "Enter your city name..."
      not_found_message: "Don't see your city? Add it below!"
      
    add_new_city_section:
      city_name: text required
      country: text required  
      state_province: text optional
      add_city_button: "Add This City"
      
  show review_preferences:
    title: "How Would You Like to See Reviews?"
    subtitle: "You can change this anytime in settings"
    
    sorting_preference: "Default sorting for reviews:"
      most_relevant: "Most Relevant (Recommended)"
      newest: "Newest First"
      oldest: "Oldest First"  
      highest_rated: "Highest Rated First"
      lowest_rated: "Lowest Rated First"
      most_helpful: "Most Helpful First"
      
    finish_button: "Complete Setup"

interface city_discovery:
  show search_section:
    title: "Find Your Next City"
    search_input: text placeholder "Search cities, countries..."
    search_button: "Search"
    
  show featured_cities:
    title: "Popular Destinations"
    for each city in City order by average_rating desc limit 6:
      display city_card:
        name: city.name
        country: city.country
        rating: city.average_rating stars
        review_count: city.total_reviews reviews

interface city_details:
  show city_header:
    city_name: selected city.name
    location: city.country, city.state_province
    overall_rating: city.average_rating stars
    total_reviews: city.total_reviews reviews
    add_review_button: "Write a Review"
    add_photo_button: "Add Photos"
    
  show city_information:
    title: "About " + city.name
    wikipedia_content:
      summary: city.wikipedia_summary
      read_more_link: city.wikipedia_url
      
    photo_gallery:
      title: "Photos"
      for each photo in city.google_images limit 6:
        display google_image: photo
      for each photo in city.user_photos:
        display user_photo:
          image: photo.image_url
          caption: photo.caption
          by: "Photo by " + photo.uploaded_by.name
          
  show reviews_list:
    title: "What People Are Saying"
    
    review_controls:
      sort_dropdown: "Sort by:"
        most_relevant: "Most Relevant"
        newest: "Newest First" 
        oldest: "Oldest First"
        highest_rated: "Highest Rated"
        lowest_rated: "Lowest Rated"
        most_helpful: "Most Helpful"
      current_selection: current user.review_sort_preference
      
    for each review in Review where city_id is selected city sorted by current user.review_sort_preference:
      display review_card:
        reviewer_profile:
          name: review.user.name
          photo: review.user.profile_photo
          status: if review.lived_there then "üè† Lives in " + city.name else "üß≥ Visited " + city.name
          duration: if not review.lived_there then "for " + review.visited_duration
        rating: review.rating stars
        review_date: review.review_date
        title: review.title
        review_text: review.review_text
        review_photos: review.review_photos
        helpful_votes: review.helpful_votes helpful
        helpful_button: "üëç Helpful"

interface user_profile:
  show profile_header:
    user_photo: current user.profile_photo
    user_name: current user.name
    member_since: current user.join_date
    total_reviews: current user.total_reviews reviews
    
  show user_reviews:
    title: "Your Reviews"
    for each review in Review where user_id is current user:
      display review_summary:
        city: review.city.name
        rating: review.rating stars
        title: review.title
        date: review.review_date
        helpful_votes: review.helpful_votes

interface review_submission:
  show review_form:
    title: "Share Your Experience"
    subtitle: "Writing as: " + current user.name
    city_info: "Reviewing: " + selected city.name
    overall_rating: 1-5 stars required
    review_title: text required
    detailed_review: textarea required placeholder "Tell us about your experience - cost of living, safety, culture, job opportunities, nightlife, transportation, or anything that affected your quality of life there"
    
    photo_upload_section:
      title: "Add Photos (Optional)"
      photo_upload: multiple images
      photo_previews: show selected photos
      
    lived_or_visited: "Your connection to this city:"
      lived_there: boolean
      visit_duration: days | weeks | months | years
      
    submit_button: "Submit Review"

interface city_creation:
  show add_city_form:
    title: "Add Your City"
    subtitle: "Help others discover this place"
    city_name: text required
    country: text required
    state_province: text optional
    create_button: "Create City"
    cancel_button: "Cancel"

logic authentication_processing:
  process google_login:
    when user clicks google_login_button:
      authenticate with google oauth
      if user exists:
        create user session
        if user.onboarding_completed:
          redirect to city_discovery
        else:
          redirect to user_onboarding
      else:
        create User record with google data
        create user session
        redirect to user_onboarding
        
  process facebook_login:
    when user clicks facebook_login_button:
      authenticate with facebook oauth
      if user exists:
        create user session
        if user.onboarding_completed:
          redirect to city_discovery
        else:
          redirect to user_onboarding
      else:
        create User record with facebook data
        create user session
        redirect to user_onboarding
        
  process email_registration:
    when user submits email_registration:
      validate email uniqueness
      validate password match
      hash password
      create User record
      send welcome email
      create user session
      redirect to user_onboarding
      
  process email_login:
    when user submits email_login:
      validate email and password
      create user session
      if user.onboarding_completed:
        redirect to city_discovery
      else:
        redirect to user_onboarding

logic onboarding_flow:
  process complete_onboarding:
    when user completes authentication:
      if user.onboarding_completed:
        redirect to city_discovery
      else:
        redirect to user_onboarding
      
  process select_user_type:
    when user clicks visiting_option or native_option:
      store user preference
      show city_selection interface
      
  process search_existing_city:
    when user enters city_search:
      filter City where name contains query
      display matching cities
      if no matches:
        show add_new_city_section
        
  process complete_onboarding_setup:
    when user clicks finish_button:
      update User review_sort_preference
      set User onboarding_completed to true
      redirect to city_discovery

logic city_management:
  process create_new_city:
    when user submits add_city_form:
      validate city details
      create City record with current user as added_by
      fetch_wikipedia_data for new city
      fetch_google_images for new city
      redirect to city_details for new city
      
  process fetch_wikipedia_data:
    call external api "https://en.wikipedia.org/api/rest_v1/page/summary/" + city.name
    parse wikipedia response
    update City wikipedia_summary and wikipedia_url
    
  process fetch_google_images:
    call external api "Google Custom Search API" with query city.name + " city photos"
    parse image results
    update City google_images with top 10 results
    
  process add_city_photo:
    when user uploads city photos:
      validate image files
      upload to cloud storage
      create CityPhoto records
      update city photo gallery

logic review_processing:
  process submit_review:
    when user submits review_form:
      if user is authenticated:
        validate all required fields
        if review_photos exist:
          upload photos to cloud storage
        create Review record with current user and photos
        update City average_rating
        increment City total_reviews
        increment User total_reviews
        send confirmation message
        redirect to city_details page
      else:
        redirect to authentication
        
  process vote_helpful:
    when user clicks helpful_button:
      if user is authenticated:
        increment Review helpful_votes
        update review display
      else:
        redirect to authentication
      
  process search_cities:
    when user enters search query:
      filter City where name or country contains query
      display matching results
      sort by relevance and rating

logic review_display:
  process change_sort_preference:
    when user selects sort_dropdown option:
      update current user.review_sort_preference
      refresh reviews_list with new sorting
      
  process apply_review_sorting:
    when displaying reviews:
      if sort is most_relevant:
        sort by: helpful_votes desc, rating desc, review_date desc
      if sort is newest:
        sort by: review_date desc
      if sort is oldest:
        sort by: review_date asc
      if sort is highest_rated:
        sort by: rating desc, helpful_votes desc
      if sort is lowest_rated:
        sort by: rating asc, helpful_votes desc
      if sort is most_helpful:
        sort by: helpful_votes desc, rating desc
```

ANALYSIS OF THE CITYREP EXAMPLE:

This complete application demonstrates:

‚úÖ TRINITY PRINCIPLE COMPLIANCE:
- App ‚Üí User: All interfaces with comprehensive display logic
- User ‚Üí App: Complete input handling and validation
- App ‚Üí App: Full business logic workflows and data processing

‚úÖ ADVANCED FEATURES:
- Multi-step user onboarding flow
- External API integrations (Wikipedia, Google Images)
- File upload handling with cloud storage
- Complex data relationships and filtering
- Dynamic UI based on user preferences
- Comprehensive authentication flows

‚úÖ BUSINESS LOGIC PATTERNS:
- User-generated content workflows
- Rating and review systems
- Photo upload and management
- Search and discovery patterns
- Social interaction features (helpful votes)

‚úÖ DATA MODEL RELATIONSHIPS:
- One-to-many: City ‚Üí Reviews, User ‚Üí Reviews
- Many-to-many: Cities ‚Üî Users (through Reviews)
- Nested data: CityPhotos within Cities

This serves as the gold standard for comprehensive APML applications and demonstrates the language's capability to express complex, production-ready applications through natural, conversational syntax.